############################################################################################
# Copyright (C) 2021 Prediction Machine Advisers, LLC
# This file is available under MIT license
# based on https://github.com/predictionmachine/pm-gh-actions/blob/main/.github/workflows/pm-gh-actions.yml
# version 0.3.3
############################################################################################

name: PM CI workflow
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    branches:
      - main
      - dev
env:
  GUIDELINE_REPO: 'https://github.com/predictionmachine/pm-coding-template'

jobs:

  # Check branch name standard as per `pm-coding-template`
  # Ref: https://github.com/predictionmachine/pm-coding-template#github-branches-pull-requests
  check-branch-naming-convention:
    runs-on: ubuntu-latest
    name: Check branch naming convention as per `pm-coding-template`
    if: ${{ github.event_name == 'pull_request' }}
    env:
      BRANCH_NAME_RULE: 'https://github.com/predictionmachine/pm-coding-template#github-branches-pull-requests'
    steps:
      - name: Check branch name
        id: branchCheck
        run: |
          echo "branch name: $GITHUB_HEAD_REF"
          if [[ "$GITHUB_HEAD_REF" =~ "/" ]];then
            echo "::set-output name=is_valid_name::true"
          else
            echo "::set-output name=is_valid_name::false"
          fi
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.branchCheck.outputs.is_valid_name == 'false' }}
        with:
          header: invalid-branch-name-comments
          message: |
            ðŸ‘‹ &nbsp; @${{ github.event.pull_request.user.login }}
            Please use the valid branch name, [see here](${{ env.BRANCH_NAME_RULE }}).
            Please make sure you have followed our [contributing guidelines](${{ env.GUIDELINE_REPO }}).
      - name: Exit job for invalid branch name
        if: ${{ steps.branchCheck.outputs.is_valid_name == 'false' }}
        run: |
          echo "Invalid branch name: $GITHUB_HEAD_REF"
          echo "Please use the standard mentioned here: ${{ env.BRANCH_NAME_RULE }}"
          exit 1

  enforce-pr-description:
    runs-on: ubuntu-latest
    name: 'Check PR description, fail if empty'
    env:
      TEMPLATE_URL: 'https://github.com/predictionmachine/pm-coding-template/blob/main/.github/pull_request_template.md'
    steps:
      - name: Check PR description
        if: ${{ github.event_name == 'pull_request' }}
        id: getPrBody
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo ${PR_BODY:0:5}
          if [ "${PR_BODY:0:5}" == "" ];then
            echo "::set-output name=is_empty_body::true"
          fi
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.getPrBody.outputs.is_empty_body == 'true' }}
        with:
          header: pr-empty-comments
          message: |
            ðŸ‘‹ &nbsp; @${{ github.event.pull_request.user.login }}
            Please use the PR template mentioned [here](${{ env.TEMPLATE_URL }})
            Please make sure you have followed our [contributing guidelines](${{ env.GUIDELINE_REPO }}).
      - name: Exit the job for empty PR description
        if: ${{ steps.getPrBody.outputs.is_empty_body == 'true' }}
        run: |
          echo "Failed due to empty PR description"
          exit 1

  check-unwanted-files:
    runs-on: ubuntu-latest
    name: Check for unwanted files - .zip etc.
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: 'Check if file exists, and set flag'
        id: fileCheck
        run: |
          file_count=$(find ./ -type f \( -iname \*.zip -o -iname \*.parque \) | wc -l ) # get file count of the unwanted files
          if [[ "$file_count==0" ]];then
            echo "No unwanted files found"
            exit 0
          else
            echo "::set-output name=is_unwanted_file::true"
            echo "::set-output name=file_paths::$(find $PWD  -type f \( -iname \*.zip -o -iname \*.parque \))"
            echo "Please remove unwanted files"
            exit 0
          fi
      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.fileCheck.outputs.is_unwanted_file == 'true' }}
        with:
          header: file-check
          message: |
            ðŸ‘‹ &nbsp; @${{ github.event.pull_request.user.login }}
            Please remove unwanted files from the repo.
            Here is the detected file path: ${{ steps.fileCheck.outputs.file_paths }}
            Please make sure you have followed our [contributing guidelines](${{ env.GUIDELINE_REPO }}).

  # see [reviewdog/action-detect-secrets](https://github.com/Yelp/detect-secrets) and
  # [detect-secrets](https://github.com/Yelp/detect-secrets)
  check-harcoded-credentials:
    runs-on: ubuntu-latest
    name: Check hardcoded credentials in files
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: detect-secrets
        uses: reviewdog/action-detect-secrets@master
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          reporter: github-pr-review
          fail_on_error: true

  linting:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    name: 'Linting: black, flake8, docstrings interrogate'
    env:
      MIN_DOC_COV: 100
      DOCSTRING_REPORT: output/docstring_report.txt
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: black formatting check
        uses: reviewdog/action-black@v2
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          black_args: '--config=pyproject.toml'
          reporter: github-pr-review
          fail_on_error: true
      - name: flake8 lint check
        uses: reviewdog/action-flake8@v3
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          flake8_args: '--config=setup.cfg'
          reporter: github-pr-review
          fail_on_error: true
      - name: Install dependencies & create output directory for reports
        run: |
          python -m pip install --upgrade pip interrogate
          mkdir -p output # for docstring report
      - name: Check missing docstrings - interrogate
        id: docstringCheck
        run: |
          echo "$(python -m interrogate -c pyproject.toml -o "$DOCSTRING_REPORT" .)"
          cov_val=$(grep -o 'actual: [0-9.]*' $DOCSTRING_REPORT | sed 's/actual: //') # get actual docstring coverage from docstring report file
          total_cov=$(echo "$cov_val" | bc)
          echo "::set-output name=total_cov::$total_cov"
          line_count=$(wc -l < "$DOCSTRING_REPORT")
          sed -i "${line_count}i"$'\n' "$DOCSTRING_REPORT" # insert a newline after total row.
          sed -i '1d' "$DOCSTRING_REPORT" # delete the 1st line from the report, which is a coverage path.
          sed -i "1i"$'## Docstring Summary :memo:' "$DOCSTRING_REPORT" # insert a title on 1st line, for the PR comment.
      - name: Post docstring report as PR comments
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docstring-comment
          path: ${{ env.DOCSTRING_REPORT }}
      - name: Exit the job for less docstring coverage in a codebase
        if: ${{ steps.docstringCheck.outputs.total_cov < env.MIN_DOC_COV }}
        run: |
          echo "Failed because of less docstring coverage"
          echo "Expected coverage is $MIN_DOC_COV, actual coverage is ${{ steps.docstringCheck.outputs.total_cov }}"
          exit 1

  mypy-typecheck:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    name: 'Mypy Type check'
    steps:
      - name: mypy type check
        uses: tsuyoshicho/action-mypy@v3
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          reporter: github-pr-review
          mypy_flags: '--config-file=setup.cfg'

  test-and-coverage:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    name: 'Pytest and Coverage'
    env:
      MIN_DOC_COV: 100
      COVERAGE_OUTPUT_PATH: output/coverage.xml
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Use cache if possible
        # see [cache](https://github.com/actions/cache) and
        # [pip example](https://github.com/actions/cache/blob/master/examples.md#simple-example))
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements**.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ requirements.txt ]; then pip install -r requirements.txt; fi
          if [ requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Test with pytest
        run: |
          python -m pytest --continue-on-collection-errors
      # HANDLE COVERAGE
      - name: Generate coverage report
        run: |
          coverage run -m pytest
          coverage xml -o $COVERAGE_OUTPUT_PATH
      - name: Upload codecov report
        # see https://github.com/codecov/codecov-action
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVERAGE_OUTPUT_PATH }}
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
      - name: Upload code coverage to codeclimate
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          # see https://docs.codeclimate.com/docs/finding-your-test-coverage-token
          # get from https://codeclimate.com/repos/6094b3d1a32d9010d700292e/settings/test_reporter
          CC_TEST_REPORTER_ID: '${{ secrets.CC_TEST_REPORTER_ID }}'
        with:
          coverageCommand: coverage report
          coverageLocations: ${{ env.COVERAGE_OUTPUT_PATH }}
